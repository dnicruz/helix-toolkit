<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PropertyTools.Wpf</name>
    </assembly>
    <members>
        <member name="T:PropertyTools.Wpf.PropertyViewModel">
            <summary>
            The Property ViewModel
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.ViewModelBase">
            <summary>
            Base class for tabs, categories and properties 
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyViewModel.#ctor(System.Object,System.ComponentModel.PropertyDescriptor,PropertyTools.Wpf.PropertyEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.PropertyViewModel"/> class.
            </summary>
            <param name="instance">The instance being edited</param>
            <param name="descriptor">The property descriptor</param>
            <param name="owner">The parent PropertyEditor</param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyViewModel.SubscribeValueChanged">
            <summary>
            Subscribes to the ValueChanged event.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyViewModel.UnsubscribeValueChanged">
            <summary>
            Unsubscribes the value changed event.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyViewModel.SubscribeValueChanged(System.ComponentModel.PropertyDescriptor,System.EventHandler)">
            <summary>
            Subscribes to the ValueChanged event.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyViewModel.UnsubscribeValueChanged(System.ComponentModel.PropertyDescriptor,System.EventHandler)">
            <summary>
            Unsubscribes the value changed event.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyViewModel.GetValueFromEnumerable(System.Collections.IEnumerable)">
            <summary>
            The the current value from an IEnumerable instance
            </summary>
            <param name="componentList"></param>
            <returns>If all components in the enumerable are equal, it returns the value.
            If values are different, it returns null.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyViewModel.UpdateErrorInfo">
            <summary>
            Updates the error/warning properties.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.FormatString">
            <summary>
            Gets or sets the format string.
            </summary>
            <value>The format string.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.Height">
            <summary>
            Gets or sets the height of the editor for the property.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.MaxLength">
            <summary>
            Gets or sets the max length of text.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.AcceptsReturn">
            <summary>
            Gets or sets a value indicating whether the property should be edited as multiline.
            </summary>
            <value><c>true</c> if multiline; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.TextWrapping">
            <summary>
            Gets or sets the text wrapping for multiline strings.
            </summary>
            <value>The text wrapping mode.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.IsEnumerable">
            <summary>
            Gets or sets a value indicating whether this instance is enumerable.
            </summary>
            <value>
            	<c>true</c> if this instance is enumerable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.AutoUpdateText">
            <summary>
            Gets or sets a value indicating whether this text property should use PropertyChanged as UpdateTrigger.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.PropertyTemplateSelector">
            <summary>
            Gets the property template selector.
            </summary>
            <value>The property template selector.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.Instance">
            <summary>
            Gets or sets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.Descriptor">
            <summary>
            Gets or sets the property descriptor.
            </summary>
            <value>The descriptor.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.IsEnabledDescriptor">
            <summary>
            Gets or sets the descriptor for the property's IsEnabled.
            </summary>
            <value>The is enabled descriptor.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this property is enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.IsVisibleDescriptor">
            <summary>
            Gets or sets the descriptor for the property's IsVisible.
            </summary>
            <value>The is Visible descriptor.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.IsVisible">
            <summary>
            Gets or sets a value indicating whether this property is Visible.
            </summary>
            <value>
            	<c>true</c> if this instance is Visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.PropertyError">
            <summary>
            Gets the property error.
            </summary>
            <value>The property error.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.PropertyWarning">
            <summary>
            Gets the property warning.
            </summary>
            <value>The property warning.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.Visibility">
            <summary>
            Gets the visibility of the property.
            </summary>
            <value>The visibility.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.FirstInstance">
            <summary>
            Gets the first instance if the Instance is an Enumerable, otherwise return the Instance.
            </summary>
            <value>The first instance.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.Instances">
            <summary>
            Gets the instances or a single Instance as an Enumerable.
            </summary>
            <value>The instances.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
            <value>The value.</value>       
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.Name">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.IsWriteable">
            <summary>
            Gets a value indicating whether this instance is writeable.
            </summary>
            <value>
            	<c>true</c> if this instance is writeable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.Category">
            <summary>
            Gets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:PropertyTools.Wpf.TypeEditor">
            <summary>
            Define a datatemplate for a given type
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.IPropertyViewModelFactory.CreateViewModel(System.Object,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Create a PropertyViewModel for the given property.
            The ViewModel could be populated with data from local attributes.
            </summary>
            <param name="instance"></param>
            <param name="descriptor"></param>
            <returns></returns>
        </member>
        <member name="T:PropertyTools.Wpf.EnumDescriptionConverter">
            <summary>
            The EnumDescriptionConverter gets the Description attribute for Enum values.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.EnumDisplayNameAttribute">
            <summary>
            EnumDisplayNameAttribute is used to decorate enum values with display names.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.TypeDefinition">
            <summary>
            Define formatting and templates for a given type
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.ReflectionMath">
            <summary>
            Addtion, subctraction and multiplication for all kinds of objects.
            Uses reflection to invoke the operators.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ReflectionMath.TryAdd(System.Object,System.Object,System.Object@)">
            <summary>
            Performs addition with the op_Addition operator. A return value indicates whether the addition succeeded or failed.
            </summary>
            <param name="o1">The first object.</param>
            <param name="o2">The second object.</param>
            <param name="result">The sum.</param>
            <returns>True if the addition succeeded.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.ReflectionMath.TrySubtract(System.Object,System.Object,System.Object@)">
            <summary>
            Performs subtraction with the op_Subtraction operator. A return value indicates whether the addition succeeded or failed.
            </summary>
            <param name="o1">The first object.</param>
            <param name="o2">The second object.</param>
            <param name="result">The difference.</param>
            <returns>True if the subtraction succeeded.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.ReflectionMath.TryMultiply(System.Object,System.Object,System.Object@)">
            <summary>
            Performs multiplication with the op_Multiplication operator. A return value indicates whether the addition succeeded or failed.
            </summary>
            <param name="o1">The first object.</param>
            <param name="o2">The second object.</param>
            <param name="result">The product.</param>
            <returns>True if the multiplication succeeded.</returns>
        </member>
        <member name="T:PropertyTools.Wpf.WidePropertyViewModel">
            <summary>
            Properties marked [WideProperty] are using the full width of the control
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.AttributeHelper.GetFirstAttribute``1(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Return the first attribute of a given type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="descriptor"></param>
            <returns></returns>
        </member>
        <member name="M:PropertyTools.Wpf.AttributeHelper.ContainsAttributeOfType(System.ComponentModel.AttributeCollection,System.Type)">
            <summary>
            Check if an attribute collection contains an attribute of the given type
            </summary>
            <param name="attributes"></param>
            <param name="attributeType"></param>
            <returns></returns>
        </member>
        <member name="T:PropertyTools.Wpf.ILocalizationService">
            <summary>
            Localize tab/category/property names and tooltips.
            Used in PropertyEditor.LocalizationService
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.FormatStringAttribute">
            <summary>
            The FormatStringAttribute is used to provide a format string for numeric properties.
            Example usage:
              [FormatString("0.00")]
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.ResettableAttribute">
            <summary>
              The ResettableAttribute is used for resettable properties.
              Properties marked with [Resettable] will have a reset button.
              The button will reset the property to the configured reset value.
              Example usage:
              [Resettable]                  // Button label is "Reset"
              [Resettable("Default")]       // Button label is "Default"
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ResettableAttribute.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.ResettableAttribute"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ResettableAttribute.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.ResettableAttribute"/> class.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="T:PropertyTools.Wpf.SlidablePropertyViewModel">
            <summary>
            Properties marked [Slidable] are using a slider
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.OptionalPropertyViewModel">
            <summary>
            Properties that are nullable or marked [Optional(...)] are enabled/disabled by a checkbox
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.NullToBoolConverter">
            <summary>
            Null to bool value converter
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.NullToBoolConverter.NullValue">
            <summary>
            Gets or sets the value returned when the source value is null.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.Controls.ColorPicker.ColorWrapper">
            <summary>
            Wrapper class for colors - needed to get unique items in the persistent color list
            since Color.XXX added in multiple positions results in multiple items being selected.
            Also needed to implement the INotifyPropertyChanged for binding support.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.ResettablePropertyViewModel">
            <summary>
              Properties that are marked [resettable(...)] have a reset button
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ResettablePropertyViewModel.ResetCommand">
            <summary>
              Gets or sets BrowseCommand.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.TextBoxEx">
            <summary>
            TextBox that updates the binding when Enter is pressed. Also moves focus to the next control.
            Todo: replace by behaviour or attached dependency property?
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.ColorPicker">
            <summary>
            
            </summary>
            <summary>
            ColorPicker control
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker.staticList">
            <summary>
            Reference to the listbox that holds the static palette
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker.persistentList">
            <summary>
            Reference to the listbox that holds the persistent palette
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker.mouseEvent">
            <summary>
            Event handler for use by multiple controls
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.InitializePaletteSettings">
            <summary>
            Links the palette event handlers.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.LoadPalette_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the LoadPalette control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.SavePalette_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the SavePalette control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.PaletteList_MouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the MouseUp event of the PersistentList control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.GetMode(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Gets the mode of operation
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
            <returns>The mode of operation for the click event</returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.UpdateCurrentPaletteStore">
            <summary>
            Updates the current palette store.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.CreateEmptyPalette">
            <summary>
            Creates the empty palette.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.StorePalette(PropertyTools.Wpf.ColorPicker,System.String)">
            <summary>
            Stores the palette.
            </summary>
            <param name="picker">The picker.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.StoreLastUsedPalette(System.String)">
            <summary>
            Stores the last used palette.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.LoadPalette(PropertyTools.Wpf.ColorPicker,System.String)">
            <summary>
            Loads the palette.
            </summary>
            <param name="picker">The picker.</param>
            <param name="path">The path.</param>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPicker.SettingsFile">
            <summary>
            Gets or sets the settings file where the ColorPicker will store user settings.
            </summary>
            <value>The settings file.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPicker.ShowAsHex">
            <summary>
            Gets or sets a value indicating whether show as color names as hex strings.
            </summary>
            <value><c>true</c> if show as hex; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPicker.IsDropDownOpen">
            <summary>
            Gets or sets a value indicating whether the color picker popup is open.
            </summary>
            <value>
            	<c>true</c> if this popup is open; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPicker.IsPicking">
            <summary>
            Gets or sets if picking colors from the screen is active.
            Use the 'SHIFT' button to select colors when this mode is active.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPicker.SelectedColor">
            <summary>
            Gets or sets the selected color.
            </summary>
            <value>The color of the selected.</value>
        </member>
        <member name="T:PropertyTools.Wpf.SortOrderAttribute">
            <summary>
            The SortOrderAttribute is used to sort the tabs, categories and properties.
            Example usage: 
              [SortOrder(100)]
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.ColorToBrushConverter">
            <summary>
            Color to Brush value converter
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.FilePicker">
            <summary>
            FilePicker control
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.WizardDialog">
            <summary>
            Wizard dialog
            Todo: Win7 style
            </summary>
            <summary>
            WizardDialog
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.WizardDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.EnumValuesConverter">
            <summary>
            Converts an Enum to a list of the enum type values
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.SlidableAttribute">
            <summary>
            The SlidableAttribute is used for numeric properties.
            Properties marked with [Slidable] will have a slider next to its editor.
            Example usage:
              [Slidable(0,100)]
              [Slidable(0,100,1,10)]
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.AutoFiller.PeriodicClamp(System.Int32,System.Int32,System.Int32)">
            <summary>
              Clamps i between i0 and i1.
            </summary>
            <param name = "i">The input.</param>
            <param name = "i0">The minimum value.</param>
            <param name = "i1">The maximum value.</param>
            <returns></returns>
        </member>
        <member name="T:PropertyTools.Wpf.IPropertyStateUpdater">
            <summary>
            Implement this interface on your model class to be able to updates the 
            property enabled/visible states of the properties. 
            This update method is called after every property change of the same instance.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.ToDoubleConverter">
            <summary>
            Convert any object to double (if possible)
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.SimpleGrid">
            <summary>
              The SimpleGrid is a 'DataGrid' control with a 'spreadsheet style'.
             
              Supported data sources (set in the Content property)
              - arrays (rank 1 or 2)
              - enumerables
              - lists (supports add, insert and delete)
            
              Editing of the following types is included
              - bool
              - enums
              - strings
             
             Custom display/edit templates can be defined in
              - ColumnDefinitions (these are only used in the defined column)
              - TypeDefinitions (these are used in any cell)
             
              Features
              - fit to width and proportional column widths (using Gridlengths)
              - autofill
              - copy/paste
              - zoom
              - insert/delete (IList only)
              - autogenerate columns
            
              todo:
              - add item issues
              - only update modified cells on INPC and INCC
              - update Content
              - custom edit/display Templates
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.GetIndexOfItem(System.Object)">
            <summary>
            Gets the index of the specified item in the Content enumerable.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.EnumerateItems(PropertyTools.Wpf.CellRef,PropertyTools.Wpf.CellRef)">
            <summary>
            Enumerate the items in the specified cell range.
            This is used to updated the SelectedItems property.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.GetCellAlternatives(PropertyTools.Wpf.CellRef,System.Object)">
            <summary>
            Gets the alternative values for the cell.
            </summary>
            <param name="cell">The cell.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.ToTextAlignment(System.Windows.HorizontalAlignment)">
            <summary>
            Convert a HorizontalAlignment to a TextAlignment.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.VirtualizeCells">
            <summary>
            Virtualizes the UIElements for the visible cells.
            Adds elements for the visible cells not currently in the logical tree.
            Removes elements for the nonvisible cells.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.GetCellValue(PropertyTools.Wpf.CellRef)">
            <summary>
              Gets the cell value from the Content property for the specified cell.
            </summary>
            <param name = "cell">The cell reference.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.UpdateGridContent">
            <summary>
              Updates all the UIElements of the grid (both cells, headers, row and column lines).
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.OnContentItemPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when any item in the Content is changed.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.Content">
            <summary>
              Gets or sets the content of the grid.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.CurrentCell">
            <summary>
              Gets or sets the current cell.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.SelectionCell">
            <summary>
              Gets or sets the cell defining the selection area.
              The selection area is defined by the CurrentCell and SelectionCell.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.Rows">
            <summary>
              Gets or sets the rows.
            </summary>
            <value>The rows.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.Columns">
            <summary>
              Gets or sets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.AddItemHeader">
            <summary>
            Gets or sets the header used for the add item row/column. Default is "*".
            </summary>
            <value>The add item header.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.IsVirtualizing">
            <summary>
            Gets or sets a value indicating whether this control is using UI virtualizing.
            When true, only the UIElements of the visible cells will be created.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.BrushToColorConverter">
            <summary>
            Brush to Color value converter
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.FilePathAttribute">
            <summary>
            The FilePathAttribute is used for path properties.
            The filter and default extension will be used by the open/save file dialogs.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.EnumToBooleanConverter">
            <summary>
            Enum to Boolean converter
            Usage 'Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static value...}'
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.SliderEx">
            <summary>
            Slider that calls IEditableObject.BeginEdit/EndEdit when thumb dragging.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.CategoryViewModel">
            <summary>
            ViewModel for categories.
            The categories can be shown as GroupBox, Expander or by the Header.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.PropertyTemplateSelector">
            <summary>
            The PropertyTemplateSelector is used to select a DataTemplate given an PropertyViewModel instance.
            The DataTemplates should be defined in the BasicEditors.xaml/ExtendedEditors.xaml
            or in the Editors collection of the PropertyEditor.
            This Selector can also be overriden if you want to provide custom selecting implementation.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.ShowCategoriesAs">
            <summary>
              The show categories as.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ShowCategoriesAs.GroupBox">
            <summary>
              The group box.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ShowCategoriesAs.Expander">
            <summary>
              The expander.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ShowCategoriesAs.Header">
            <summary>
              The header.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.PropertyEditor">
            <summary>
              PropertyEditor control.
              Set the SelectedObject to define the contents of the control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.CATEGORY_APPEARANCE">
            <summary>
              The categor y_ appearance.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.PART_GRID">
            <summary>
              The par t_ grid.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.PART_PAGE">
            <summary>
              The par t_ page.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.PART_TABS">
            <summary>
              The par t_ tabs.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.PropertyTemplateSelectorProperty">
            <summary>
              The property template selector property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.CategoryTemplateSelectorProperty">
            <summary>
              The category template selector property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.LabelWidthProperty">
            <summary>
              The label width property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.ShowReadOnlyPropertiesProperty">
            <summary>
              The show read only properties property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.ShowTabsProperty">
            <summary>
              The show tabs property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.DeclaredOnlyProperty">
            <summary>
              The declared only property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.SelectedObjectProperty">
            <summary>
              The selected object property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.SelectedObjectsProperty">
            <summary>
              The selected objects property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.ShowBoolHeaderProperty">
            <summary>
              The show bool header property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.ShowCategoriesAsProperty">
            <summary>
              The show categories as property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.DefaultCategoryNameProperty">
            <summary>
              The default category name property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.LabelAlignmentProperty">
            <summary>
              The label alignment property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.LocalizationServiceProperty">
            <summary>
              The localization service property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.ImageProviderProperty">
            <summary>
              The image provider property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.RequiredAttributeProperty">
            <summary>
              The required attribute property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.PropertyValueChangedEvent">
            <summary>
              The property value changed event.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.DefaultTabNameProperty">
            <summary>
              The default tab name property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.ErrorTemplateProperty">
            <summary>
              The error template property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.WarningTemplateProperty">
            <summary>
              The warning template property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.ErrorBorderThicknessProperty">
            <summary>
              The error border thickness property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.PropertyStateProviderProperty">
            <summary>
              The property state provider property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.propertyMap">
            <summary>
              The PropertyMap dictionary contains a map of all Properties of the current object being edited.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.contentControl">
            <summary>
              The content control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.grid">
            <summary>
              The grid.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.model">
            <summary>
              The model.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.propertyViewModelFactory">
            <summary>
              The property view model factory.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.tabControl">
            <summary>
              The tab control.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.#cctor">
            <summary>
              Initializes static members of the <see cref="T:PropertyTools.Wpf.PropertyEditor"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.PropertyEditor"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.OnApplyTemplate">
            <summary>
              The on apply template.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.PropertyEditor_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
              The property editor_ loaded.
            </summary>
            <param name = "sender">
              The sender.
            </param>
            <param name = "e">
              The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.PropertyEditor_Unloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
              The property editor_ unloaded.
            </summary>
            <param name = "sender">
              The sender.
            </param>
            <param name = "e">
              The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.SelectedObjectChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
              The selected object changed.
            </summary>
            <param name = "d">
              The d.
            </param>
            <param name = "e">
              The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.SelectedObjectsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
              The selected objects changed.
            </summary>
            <param name = "d">
              The d.
            </param>
            <param name = "e">
              The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.RaisePropertyChangedEvent(System.String,System.Object,System.Object)">
            <summary>
              Invoke this method to raise a PropertyChanged event.
              This event only makes sense when editing single objects (not IEnumerables).
            </summary>
            <param name = "propertyName">
              The property Name.
            </param>
            <param name = "oldValue">
              The old Value.
            </param>
            <param name = "newValue">
              The new Value.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.AppearanceChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
              The appearance changed.
            </summary>
            <param name = "d">
              The d.
            </param>
            <param name = "e">
              The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.UpdateContent">
            <summary>
              Updates the content of the control
              (after initialization and SelectedObject changes)
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.ClearModel">
            <summary>
              The clear model.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.CreatePropertyModel(System.Object,System.Boolean)">
            <summary>
              This method takes an object Instance and creates the property model.
              The properties are organized in a hierarchy
              PropertyTab
              PropertyCategory
              Property|OptionalProperty|WideProperty|CheckBoxProperty
            </summary>
            <param name = "instance">
            </param>
            <param name = "isEnumerable">
            </param>
            <returns>
              Collection of tab ViewModels
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.CheckOptionalProperties">
            <summary>
              The check optional properties.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.SortPropertyModel(System.Collections.Generic.List{PropertyTools.Wpf.TabViewModel})">
            <summary>
              The sort property model.
            </summary>
            <param name = "result">
              The result.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.ParseTabAndCategory(System.ComponentModel.PropertyDescriptor,System.String@,System.String@)">
            <summary>
              If a CategoryAttributes is given as
              [Category("TabA|GroupB")]
              this will be parsed into tabName="TabA" and categoryName="GroupB"
            
              If the CategoryAttribute is
              [Category("GroupC")]
              the method will not change tabName, but set categoryName="GroupC"
            </summary>
            <param name = "descriptor">
            </param>
            <param name = "tabName">
            </param>
            <param name = "categoryName">
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.GetOrCreateCategory(System.Type,System.String,System.Int32,PropertyTools.Wpf.TabViewModel,PropertyTools.Wpf.CategoryViewModel@)">
            <summary>
              The get or create category.
            </summary>
            <param name = "instanceType">
              The instance type.
            </param>
            <param name = "categoryName">
              The category name.
            </param>
            <param name = "sortOrder">
              The sort order.
            </param>
            <param name = "currentTabViewModel">
              The current tab view model.
            </param>
            <param name = "currentCategoryViewModel">
              The current category view model.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.GetOrCreateTab(System.Type,System.Collections.Generic.ICollection{PropertyTools.Wpf.TabViewModel},System.String,System.Int32,PropertyTools.Wpf.TabViewModel@,PropertyTools.Wpf.CategoryViewModel@)">
            <summary>
              The get or create tab.
            </summary>
            <param name = "instanceType">
              The instance type.
            </param>
            <param name = "tabs">
              The tabs.
            </param>
            <param name = "tabName">
              The tab name.
            </param>
            <param name = "sortOrder">
              The sort order.
            </param>
            <param name = "currentTabViewModel">
              The current tab view model.
            </param>
            <param name = "currentCategoryViewModel">
              The current category view model.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.CreateTab(System.String)">
            <summary>
              The create tab.
            </summary>
            <param name = "tabName">
              The tab name.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.LocalizePropertyHeader(System.Type,PropertyTools.Wpf.PropertyViewModel)">
            <summary>
              Updates the property header and tooltip
            </summary>
            <param name = "instanceType">
              Type of the object being edited
            </param>
            <param name = "propertyViewModel">
              The property viewmodel
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.LocalizeCategoryHeader(System.Type,PropertyTools.Wpf.CategoryViewModel)">
            <summary>
              Updates the category (expander/groupbox) header and tooltip
            </summary>
            <param name = "instanceType">
            </param>
            <param name = "categoryViewModel">
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.LocalizeTabHeader(System.Type,PropertyTools.Wpf.TabViewModel)">
            <summary>
              Updates the tab header and tooltip
            </summary>
            <param name = "instanceType">
            </param>
            <param name = "tabViewModel">
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
              The OnPropertyChanged handler.
            </summary>
            <param name = "sender">
              The sender.
            </param>
            <param name = "e">
              The event arguments.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.UpdatePropertyStates(System.Object)">
            <summary>
              The UpdatePropertyStates method updates the properties IsEnabled when the instance being edited implements IPropertyStateUpdater.
            </summary>
            <param name = "instance">
              The instance.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.UpdateErrorInfo">
            <summary>
              The update error info.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.UpdateOptionalProperties(PropertyTools.Wpf.PropertyViewModel)">
            <summary>
              Update IsEnabled on properties marked [Optional(..)]
            </summary>
            <param name = "propertyViewModel">
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.GetLocalizedString(System.Type,System.String)">
            <summary>
              The get localized string.
            </summary>
            <param name = "instanceType">
              The instance type.
            </param>
            <param name = "key">
              The key.
            </param>
            <returns>
              The get localized string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.GetLocalizedTooltip(System.Type,System.String)">
            <summary>
              The get localized tooltip.
            </summary>
            <param name = "instanceType">
              The instance type.
            </param>
            <param name = "key">
              The key.
            </param>
            <returns>
              The get localized tooltip.
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.EnumAsRadioButtonsLimit">
            <summary>
              Gets or sets the maximum number of enum values that can be shown using radio buttons.
              If the value is 0, Enums will always be shown as ComboBoxes.
              If the value is infinity, Enums will always be shown as Radiobuttons.
            </summary>
            <value>The limit.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.PropertyStateProvider">
            <summary>
              Gets or sets PropertyStateProvider.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.ErrorBorderThickness">
            <summary>
              Gets or sets ErrorBorderThickness.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.SelectedObjects">
            <summary>
              Gets or sets SelectedObjects.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.PropertyViewModelFactory">
            <summary>
              Gets or sets the property view model factory.
              This factory is used to generate the view model based on the property descriptors.
              You can override this factory to create the view model based on your own attributes.
            </summary>
            <value>The property view model factory.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.Editors">
            <summary>
              Collection of custom editors
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.LabelWidth">
            <summary>
              The width of the property labels
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.ShowReadOnlyProperties">
            <summary>
              Show read-only properties.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.ShowTabs">
            <summary>
              Organize the properties in tabs.
              You should use the [Category("Tabname|Groupname")] attribute to define the tabs.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.DeclaredOnly">
            <summary>
              Show only declared properties (not inherited properties).
              Specifies that only members declared at the level of the supplied type's hierarchy 
              should be considered. Inherited members are not considered.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.SelectedObject">
            <summary>
              Gets or sets SelectedObject.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.ShowBoolHeader">
            <summary>
              Show enum properties as ComboBox or RadioButtonList.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.ShowCategoriesAs">
            <summary>
              Gets or sets ShowCategoriesAs.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.DefaultTabName">
            <summary>
              Gets or sets DefaultTabName.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.DefaultCategoryName">
            <summary>
              Gets or sets DefaultCategoryName.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.LabelAlignment">
            <summary>
              Gets or sets the alignment of property labels.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.LocalizationService">
            <summary>
              Implement the LocalizationService to translate the tab, category and property strings and tooltips
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.ImageProvider">
            <summary>
              The ImageProvider can be used to provide images to the Tab icons.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.RequiredAttribute">
            <summary>
              Gets or sets the required attribute type.
              If the required attribute type is set, only properties where this attribute is set will be shown.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.PropertyTemplateSelector">
            <summary>
              The PropertyTemplateSelector is used to select the DataTemplate for each PropertyViewModel
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.CategoryTemplateSelector">
            <summary>
              The CategoryTemplateSelector is used to select the DataTemplate for the CategoryViewModels
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.ErrorTemplate">
            <summary>
              Gets or sets ErrorTemplate.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.WarningTemplate">
            <summary>
              Gets or sets WarningTemplate.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.rortemplate">
            <summary>
              Gets rortemplate.
            </summary>
        </member>
        <member name="E:PropertyTools.Wpf.PropertyEditor.PropertyChanged">
            <summary>
              The property changed.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.PropertyValueChangedEventArgs">
            <summary>
              Event args for the PropertyValueChanged event
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyValueChangedEventArgs.PropertyName">
            <summary>
              Gets or sets PropertyName.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyValueChangedEventArgs.OldValue">
            <summary>
              Gets or sets OldValue.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyValueChangedEventArgs.NewValue">
            <summary>
              Gets or sets NewValue.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.AboutDialog">
            <summary>
            A basic About Dialog (inspired by Google)
            </summary>
            <summary>
            AboutDialog
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.AboutDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutDialog.Image">
            <summary>
            Sets the image used in the about dialog.
            Example:
             d.Image = new BitmapImage(new Uri(@"pack://application:,,,/AssemblyName;component/Images/about.png"));           
            </summary>
            <value>The image.</value>
        </member>
        <member name="P:PropertyTools.Wpf.AboutDialog.UpdateStatus">
            <summary>
            Sets the update status.
            </summary>
            <value>The update status.</value>
        </member>
        <member name="T:PropertyTools.Wpf.BoolToVisibilityConverter">
            <summary>
            Bool to Visibility value converter
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.HeightAttribute">
            <summary>
            The HeightAttribute is used to control the height of TextBoxes.
            Example usage: 
              [Height(100)] 
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TypeHelper.FindBiggestCommonType(System.Collections.IEnumerable)">
            <summary>
            Finds the biggest common type of items in the list.
            </summary>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="T:PropertyTools.Wpf.NullToVisibilityConverter">
            <summary>
            Null to Visibility converter
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.DoubleToGridLengthConverter">
            <summary>
            GridLength to double value converter
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.FormattingTextBox">
            <summary>
            A TextBox with a bindable StringFormat property.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.IImageProvider">
            <summary>
            Provides images for PropertyEditor tab icons.
            Used in PropertyEditor.ImageProvider
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.IImageProvider.GetImage(System.Type,System.String)">
            <summary>
            Return the image 
            </summary>
            <param name="type">Type of the instance being edited</param>
            <param name="key">Tab name/key</param>
            <returns></returns>
        </member>
        <member name="T:PropertyTools.Wpf.DirectoryPicker">
            <summary>
            DirectoryPicker control
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DirectoryPicker.DirectoryProperty">
            <summary>
            The directory property.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DirectoryPicker.#cctor">
            <summary>
            Initializes static members of the <see cref="T:PropertyTools.Wpf.DirectoryPicker"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DirectoryPicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.DirectoryPicker"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DirectoryPicker.Browse">
            <summary>
            The browse.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.DirectoryPicker.Directory">
            <summary>
            Gets or sets Directory.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.DirectoryPicker.BrowseCommand">
            <summary>
            Gets or sets BrowseCommand.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.IFolderBrowserDialogService">
            <summary>
            The i directory dialog.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.CaptureScreenshot">
            <summary>
            Captures screenshot using WINAPI.
            http://stackoverflow.com/questions/1736287/capturing-a-window-with-wpf
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.CaptureScreenshot.Capture(System.Windows.Rect)">
            <summary>
            Capture the screenshot.
            <param name="area">Area of screenshot.</param>
            <returns>Bitmap source that can be used e.g. as background.</returns>
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.SRCCOPY">
            <summary>dest = source</summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.SRCPAINT">
            <summary>dest = source OR dest</summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.SRCAND">
            <summary>dest = source AND dest</summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.SRCINVERT">
            <summary>dest = source XOR dest</summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.SRCERASE">
            <summary>dest = source AND (NOT dest)</summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.NOTSRCCOPY">
            <summary>dest = (NOT source)</summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.NOTSRCERASE">
            <summary>dest = (NOT src) AND (NOT dest)</summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.MERGECOPY">
            <summary>dest = (source AND pattern)</summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.MERGEPAINT">
            <summary>dest = (NOT source) OR dest</summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.PATCOPY">
            <summary>dest = pattern</summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.PATPAINT">
            <summary>dest = DPSnoo</summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.PATINVERT">
            <summary>dest = pattern XOR dest</summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.DSTINVERT">
            <summary>dest = (NOT dest)</summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.BLACKNESS">
            <summary>dest = BLACK</summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.WHITENESS">
            <summary>dest = WHITE</summary>
        </member>
        <member name="T:PropertyTools.Wpf.CategoryTemplateSelector">
            <summary>
            The CategoryTemplateSelector is used to select a DataTemplate for the categories
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.ColorHelper">
            <summary>
            Static <see cref="T:System.Windows.Media.Color"/> helper methods.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.ChangeAlpha(System.Windows.Media.Color,System.Byte)">
            <summary>
            Change the alpha value of a color
            </summary>
            <param name="c"></param>
            <param name="alpha"></param>
            <returns></returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.Interpolate(System.Windows.Media.Color,System.Windows.Media.Color,System.Double)">
            <summary>
            Linear interpolation between two <see cref="T:System.Windows.Media.Color"/>s.
            </summary>
            <param name="c0"></param>
            <param name="c1"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.ColorToHex(System.Windows.Media.Color)">
            <summary>
            Convert a <see cref="T:System.Windows.Media.Color"/> to a hexadecimal string.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.ColorDifference(System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Calculates the difference between two <see cref="T:System.Windows.Media.Color"/>s
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns>L2-norm in RGBA space</returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.HueDifference(System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Calculate the difference in hue between two <see cref="T:System.Windows.Media.Color"/>s.
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns></returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.Complementary(System.Windows.Media.Color)">
            <summary>
            Calculates the complementary color
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.HexToColor(System.String)">
            <summary>
            Convert a hexadecimal string to <see cref="T:System.Windows.Media.Color"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.UIntToColor(System.UInt32)">
            <summary>
            Convert an unsigned int (32bit) to <see cref="T:System.Windows.Media.Color"/>
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.ColorToUint(System.Windows.Media.Color)">
            <summary>
            Convert a <see cref="T:System.Windows.Media.Color"/> to unsigned int
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.ColorToHsvBytes(System.Windows.Media.Color)">
            <summary>
            Converts from a <see cref="T:System.Windows.Media.Color"/> to HSV values (byte)
            </summary>
            <param name="color"></param>
            <returns>Array of [Hue,Saturation,Value] in the range [0,255]</returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.ColorToHsv(System.Windows.Media.Color)">
            <summary>
            Converts from a <see cref="T:System.Windows.Media.Color"/> to HSV values (double)
            </summary>
            <param name="color"></param>
            <returns>Array of [Hue,Saturation,Value] in the range [0,1]</returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.HsvToColor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Converts from HSV to a RGB <see cref="T:System.Windows.Media.Color"/>
            </summary>
            <param name="hue"></param>
            <param name="saturation"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.HsvToColor(System.Double,System.Double,System.Double)">
            <summary>
            Convert from HSV to <see cref="T:System.Windows.Media.Color"/>
            http://en.wikipedia.org/wiki/HSL_color_space
            </summary>
            <param name="hue">Hue [0,1]</param>
            <param name="sat">Saturation [0,1]</param>
            <param name="val">Value [0,1]</param>
            <returns></returns>
        </member>
        <member name="P:PropertyTools.Wpf.ColumnDefinition.DataField">
            <summary>
            Gets or sets the data field.
            Note: This is not used if DisplayTemplate/EditTemplate is set.
            </summary>
            <value>The data field.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColumnDefinition.StringFormat">
            <summary>
            Gets or sets the string format.
            </summary>
            <value>The string format.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColumnDefinition.Header">
            <summary>
            Gets or sets the header.
            </summary>
            <value>The header.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColumnDefinition.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColumnDefinition.DisplayTemplate">
            <summary>
            Gets or sets the display template.
            </summary>
            <value>The display template.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColumnDefinition.EditTemplate">
            <summary>
            Gets or sets the edit template.
            </summary>
            <value>The edit template.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColumnDefinition.CanDelete">
            <summary>
            Gets or sets a value indicating whether this instance can delete.
            </summary>
            <value>
            	<c>true</c> if this instance can delete; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.ColumnDefinition.CanResize">
            <summary>
            Gets or sets a value indicating whether this instance can resize.
            </summary>
            <value>
            	<c>true</c> if this instance can resize; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.ColumnDefinition.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>The horizontal alignment.</value>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyViewModelFactory.#ctor(PropertyTools.Wpf.PropertyEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.DefaultPropertyViewModelFactory"/> class.
            </summary>
            <param name="owner">The owner PropertyEditor of the factory. 
            This is neccessary in order to get the PropertyTemplateSelector to work.</param>
        </member>
        <member name="P:PropertyTools.Wpf.DefaultPropertyViewModelFactory.IsEnabledPattern">
            <summary>
            Gets or sets the IsEnabledPattern.
            
            Example using a "Is{0}Enabled" pattern:
              string City { get; set; }
              bool IsCityEnabled { get; set; }
            The state of the City property will be controlled by the IsCityEnabled property
            </summary>
            <value>The IsEnabledPattern.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DefaultPropertyViewModelFactory.IsVisiblePattern">
            <summary>
            Gets or sets the IsVisiblePattern.
            
            Example using a "Is{0}Visible" pattern:
              string City { get; set; }
              bool IsCityVisible { get; set; }
            The visibility state of the City property will be controlled by the IsCityVisible property
            </summary>
            <value>The IsVisiblePattern.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DefaultPropertyViewModelFactory.UsePropertyPattern">
            <summary>
            Gets or sets the UsePattern. This is used to create an "Optional" property.
            
            Example using a "Use{0}" pattern:
              string City { get; set; }
              bool UseCity { get; set; }
            The optional state of the City property will be controlled by the UseCity property
            </summary>
            <value>The UsePropertyPattern.</value>
        </member>
        <member name="T:PropertyTools.Wpf.IPropertyStateProvider">
            <summary>
            Return Enabled, Visible, Error and Warning states for a given component and property.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.AutoUpdateTextAttribute">
            <summary>
            The AutoUpdateTextAttribute forces the binding to update the value at every change.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.TabViewModel">
            <summary>
            ViewModel for the tabs.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.ColorToHexConverter">
            <summary>
            Color to Hex string value converter
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PropertyTools.Wpf.DockPanelSplitter" -->
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.UpdateTargetElement">
            <summary>
            Update the target element (the element the DockPanelSplitter works on)
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.DockPanelSplitter.ProportionalResize">
            <summary>
            Resize the target element proportionally with the parent container
            Set to false if you don't want the element to be resized when the parent is resized.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.DockPanelSplitter.Thickness">
            <summary>
            Height or width of splitter, depends of orientation of the splitter
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.RadioButtonsAttribute">
            <summary>
            The RadiobuttonAttribute defines if an enum property should use a 
            radiobutton list as its editor. If the UseRadioButtons property is false, a combobox will be used.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.OptionalAttribute">
            <summary>
            The OptionalAttribute is used for optional properties.
            Properties marked with [Optional] will have a checkbox as the label.
            The checkbox will enable/disable the property value editor.
            Example usage:
              [Optional]                    // requires a nullable property type
              [Optional("HasSomething")]    // relates to other property HasSomething
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.PropertyDialog">
            <summary>
            Automatic Property Dialog
            Set the DataContext of the Dialog to the instance you want to edit.
            </summary>
            <summary>
            PropertyDialog
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.GetFieldValues(System.Object)">
            <summary>
            This is used to clone the object.  
            Override the method to provide a more efficient clone.  
            The default implementation simply reflects across 
            the object copying every field.
            </summary>
            <returns>Clone of current object</returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.RestoreFieldValues(System.Collections.Generic.Dictionary{System.String,System.Object},System.Object)">
            <summary>
            This restores the state of the current object from the passed clone object.
            </summary>
            <param name="fieldValues">Object to restore state from</param>
            <param name="obj"></param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.Shell32.BrowseForFolderDialog">
            <summary>
            Represents a common dialog box (Win32::SHBrowseForFolder()) that allows a user to select a folder.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.browseInfo">
            <summary>
            The browse info.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.Shell32.BrowseForFolderDialog"/> class. 
            Constructs a BrowseForFolderDialog with default BrowseInfoFlags set to BIF_NEWDIALOGSTYLE.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.ShowDialog">
            <summary>
            Shows the dialog (Win32::SHBrowseForFolder()).
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.ShowDialog(System.Windows.Window)">
            <summary>
            Shows the dialog (Win32::SHBrowseForFolder()) with its hwndOwner set to the handle of 'owner'.
            </summary>
            <param name="owner">
            The owner.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.PInvokeSHBrowseForFolder(System.Windows.Window)">
            <summary>
            The p invoke sh browse for folder.
            </summary>
            <param name="owner">
            The owner.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseEventHandler(System.IntPtr,PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageFromBrowser,System.IntPtr,System.IntPtr)">
            <summary>
            The browse event handler.
            </summary>
            <param name="hwnd">
            The hwnd.
            </param>
            <param name="uMsg">
            The u msg.
            </param>
            <param name="lParam">
            The l param.
            </param>
            <param name="lpData">
            The lp data.
            </param>
            <returns>
            The browse event handler.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.SHBrowseForFolderW(PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BROWSEINFOW)">
            <summary>
            The sh browse for folder w.
            </summary>
            <param name="bi">
            The bi.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.SHGetPathFromIDList(System.IntPtr,System.Text.StringBuilder)">
            <summary>
            The sh get path from id list.
            </summary>
            <param name="pidl">
            The pidl.
            </param>
            <param name="path">
            The path.
            </param>
            <returns>
            The sh get path from id list.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.SendMessageW(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            The send message w.
            </summary>
            <param name="hWnd">
            The h wnd.
            </param>
            <param name="Msg">
            The msg.
            </param>
            <param name="wParam">
            The w param.
            </param>
            <param name="lParam">
            The l param.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.SendMessageW(System.IntPtr,PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageToBrowser,System.IntPtr,System.String)">
            <summary>
            The send message w.
            </summary>
            <param name="hWnd">
            The h wnd.
            </param>
            <param name="msg">
            The msg.
            </param>
            <param name="wParam">
            The w param.
            </param>
            <param name="str">
            The str.
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.SelectedFolder">
            <summary>
            Gets the current and or final selected folder path.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.Title">
            <summary>
            Gets or sets the string that is displayed above the tree view control in the dialog box (must set BEFORE calling ShowDialog()). 
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.InitialFolder">
            <summary>
            Gets or sets the initially selected folder path.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.InitialExpandedFolder">
            <summary>
            Gets or sets the initially selected and expanded folder path.  Overrides SelectedFolder.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.OKButtonText">
            <summary>
            Gets or sets the text for the dialog's OK button.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfo">
            <summary>
            Provides direct access to the Win32::SHBrowseForFolder() BROWSEINFO structure used to create the dialog in ShowDialog().
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowserDialogFlags">
            <summary>
            Provides direct access to the ulFlags field of the Win32::SHBrowseForFolder() structure used to create the dialog in ShowDialog().
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseCallbackProc">
            <summary>
            The browse callback proc.
            </summary>
            <param name="hwnd">
            The hwnd.
            </param>
            <param name="uMsg">
            The u msg.
            </param>
            <param name="lParam">
            The l param.
            </param>
            <param name="lpData">
            The lp data.
            </param>
        </member>
        <member name="T:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags">
            <summary>
            The browse info flags.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_None">
            <summary>
            No specified BIF_xxx flags.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_RETURNONLYFSDIRS">
            <summary>
            Only return file system directories. If the user selects folders that are not part of the file system, the OK button is grayed.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_DONTGOBELOWDOMAIN">
            <summary>
            Do not include network folders below the domain level in the dialog box's tree view control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_STATUSTEXT">
            <summary>
            Include a status area in the dialog box. 
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_RETURNFSANCESTORS">
            <summary>
            Only return file system ancestors. An ancestor is a subfolder that is beneath the root folder in the namespace hierarchy.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_EDITBOX">
            <summary>
            Include an edit control in the browse dialog box that allows the user to type the name of an item.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_VALIDATE">
            <summary>
            If the user types an invalid name into the edit box, the browse dialog box will call the application's BrowseCallbackProc with the BFFM_VALIDATEFAILED message. 
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_NEWDIALOGSTYLE">
            <summary>
            Use the new user interface. Setting this flag provides the user with a larger dialog box that can be resized.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_USENEWUI">
            <summary>
            Use the new user interface, including an edit box. This flag is equivalent to BIF_EDITBOX | BIF_NEWDIALOGSTYLE. 
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_BROWSEINCLUDEURLS">
            <summary>
            The browse dialog box can display URLs. The BIF_USENEWUI and BIF_BROWSEINCLUDEFILES flags must also be set. 
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_UAHINT">
            <summary>
            When combined with BIF_NEWDIALOGSTYLE, adds a usage hint to the dialog box in place of the edit box.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_NONEWFOLDERBUTTON">
            <summary>
            Do not include the New Folder button in the browse dialog box.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_NOTRANSLATETARGETS">
            <summary>
            When the selected item is a shortcut, return the PIDL of the shortcut itself rather than its target.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_BROWSEFORCOMPUTER">
            <summary>
            Only return computers. If the user selects anything other than a computer, the OK button is grayed.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_BROWSEFORPRINTER">
            <summary>
            Only allow the selection of printers. If the user selects anything other than a printer, the OK button is grayed. 
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_BROWSEINCLUDEFILES">
            <summary>
            The browse dialog box will display files as well as folders.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_SHAREABLE">
            <summary>
            The browse dialog box can display shareable resources on remote systems. 
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageFromBrowser">
            <summary>
            The message from browser.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageFromBrowser.BFFM_INITIALIZED">
            <summary>
            The dialog box has finished initializing.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageFromBrowser.BFFM_SELCHANGED">
            <summary>
            The selection has changed in the dialog box.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageFromBrowser.BFFM_VALIDATEFAILEDA">
            <summary>
            (ANSI) The user typed an invalid name into the dialog's edit box. A nonexistent folder is considered an invalid name.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageFromBrowser.BFFM_VALIDATEFAILEDW">
            <summary>
            (Unicode) The user typed an invalid name into the dialog's edit box. A nonexistent folder is considered an invalid name.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageFromBrowser.BFFM_IUNKNOWN">
            <summary>
            An IUnknown interface is available to the dialog box.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageToBrowser">
            <summary>
            The message to browser.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageToBrowser.WM_USER">
            <summary>
            Win32 API macro - start of user defined window message range.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageToBrowser.BFFM_SETSTATUSTEXTA">
            <summary>
            (ANSI) Sets the status text. Set lpData to point to a null-terminated string with the desired text. 
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageToBrowser.BFFM_ENABLEOK">
            <summary>
            Enables or disables the dialog box's OK button.  lParam - To enable, set to a nonzero value. To disable, set to zero.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageToBrowser.BFFM_SETSELECTIONA">
            <summary>
            (ANSI) Specifies the path of a folder to select. 
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageToBrowser.BFFM_SETSELECTIONW">
            <summary>
            (Unicode) Specifies the path of a folder to select. 
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageToBrowser.BFFM_SETSTATUSTEXTW">
            <summary>
            (Unicode) Sets the status text. Set lpData to point to a null-terminated string with the desired text. 
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageToBrowser.BFFM_SETOKTEXT">
            <summary>
            Sets the text that is displayed on the dialog box's OK button.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageToBrowser.BFFM_SETEXPANDED">
            <summary>
            Specifies the path of a folder to expand in the Browse dialog box. 
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BROWSEINFOW">
            <summary>
            The browseinfow.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BROWSEINFOW.hwndOwner">
            <summary>
            A handle to the owner window for the dialog box.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BROWSEINFOW.pidlRoot">
            <summary>
            A pointer to an item identifier list (PIDL) specifying the location of the root folder from which to start browsing. 
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BROWSEINFOW.pszDisplayName">
            <summary>
            The address of a buffer to receive the display name of the folder selected by the user. The size of this buffer is assumed to be MAX_PATH characters.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BROWSEINFOW.lpszTitle">
            <summary>
            The address of a null-terminated string that is displayed above the tree view control in the dialog box. 
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BROWSEINFOW.ulFlags">
            <summary>
            Flags specifying the options for the dialog box. 
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BROWSEINFOW.lpfn">
            <summary>
            A BrowseCallbackProc delegate that the dialog box calls when an event occurs.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BROWSEINFOW.lParam">
            <summary>
            An application-defined value that the dialog box passes to the BrowseCallbackProc delegate, if one is specified.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BROWSEINFOW.iImage">
            <summary>
            A variable to receive the image associated with the selected folder. The image is specified as an index to the system image list.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.Bitmap">
            <summary>
            The Bitmap element is using the ActualWidth/Height of the image for the control size.
            It also offsets the image to avoid blurring over pixel boundaries. (todo: Can this also be achieved with SnapToDevicePixels?)
            http://blogs.msdn.com/b/dwayneneed/archive/2007/10/05/blurry-bitmaps.aspx
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.DirectoryPathAttribute">
            <summary>
            The DirectoryPathAttribute is used for directory properties.
            A "Browse" button will be added, and a FolderBrowser dialog will be used to edit the directory path.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.DrawingColorToMediaColorConverter">
            <summary>
            System.Windows.Media.Color to System.Drawing.Color value converter
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.WidePropertyAttribute">
            <summary>
            The WidePropertyAttribute is used for wide properties.
            Properties marked with [WideProperty] will have the label above the editor.
            Properties marked with [WideProperty(false)] will have no label.
            The editor will use the full width of the available area.
            </summary>
        </member>
    </members>
</doc>
